include:
  - file: /Scan/trivy.yml
    project: jitesoft/gitlab-ci-lib

# TODO: Rewrite, build should be in ci script rather than docker file.

stages:
  - pre
  - download
  - build
  - containerize
  - post
  - scan


check:
  image: registry.gitlab.com/jitesoft/dockerfiles/misc:latest
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: always
    - when: never
  variables:
    GIT_STRATEGY: none
  stage: pre
  script:
    - touch versions.txt
    - VERSIONS=$(wget -qO- https://nginx.org/en/download.html | grep -oP '(?<=\<a href=\"/download/nginx\-)([0-9]{0,2}(\.?)){2}([0-9]{0,2})' | awk '{print $1}' | uniq | head -n2)
    - MAINLINE=$(echo $VERSIONS | awk '{print $1}');
    - STABLE=$(echo $VERSIONS | awk '{print $2}');
    - MAINLINE_OLD=$(cat versions.txt | awk '{print $1}');
    - STABLE_OLD=$(cat version.txt | awk '{print $2}');
    - |
      if [ "${MAINLINE}" != "$(cat MAINLINE.txt)" ] || [ -n "${FORCE_BUILD}" ] ; then
        curl -F token=${CI_JOB_TOKEN} -F ref=master -F "variables[VERSION]=${MAINLINE}" -F "variables[BUILD]=true" -F "variables[TYPE]=MAINLINE" https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/trigger/pipeline
      else
        curl -F token=${CI_JOB_TOKEN} -F ref=master -F "variables[VERSION]=${MAINLINE}" -F "variables[SCAN]=true" https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/trigger/pipeline
      fi
    - |
      if [ "${STABLE}" != "$(cat STABLE.txt)" ] || [ -n "${FORCE_BUILD}" ]; then
        curl -F token=${CI_JOB_TOKEN} -F ref=master -F "variables[VERSION]=${STABLE}" -F "variables[BUILD]=true" -F "variables[TYPE]=STABLE" https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/trigger/pipeline
      else
        curl -F token=${CI_JOB_TOKEN} -F ref=master -F "variables[VERSION]=${STABLE}" -F "variables[SCAN]=true" https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/trigger/pipeline
      fi
  cache:
    paths:
      - MAINLINE.txt
      - STABLE.txt
    key: nginx.versions
    policy: pull

scan:mainline:
  rules:
    - if: "$SCAN"
      when: always
    - if: "${VERSION}"
      when: always
    - when: never
  extends: .container_scanning
  variables:
    SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}:${VERSION}"
    GIT_STRATEGY: none

gpg:import:
  rules:
    - if: "$BUILD"
      when: always
    - when: never
  image: registry.gitlab.com/jitesoft/dockerfiles/misc:latest
  stage: pre
  script:
    - |
      if [ -f keys.out ]; then
        gpg --import keys.out
      fi
    - |
      for key in `cat pgpkeys.txt`; do
        gpg --list-keys ${key} || (
          gpg --keyserver pgp.mit.edu --recv-keys "${key}" ||
          gpg --keyserver keyserver.pgp.com --recv-keys "${key}" ||
          gpg --keyserver ha.pool.sks-keyservers.net --recv-keys "${key}"
        )
      done
    - gpg --export > keys.out
  cache:
    key: nginx.gpg.keyring
    paths:
      - keys.out
  artifacts:
    paths:
      - keys.out
    expire_in: 1 day

download:
  rules:
    - if: "$BUILD"
      when: on_success
    - when: never
  stage: download
  image: registry.gitlab.com/jitesoft/dockerfiles/misc:latest
  variables:
    GIT_STRATEGY: none
  dependencies:
    - download:versions
    - gpg:import
  script:
    - gpg --import keys.out
    - |
      for VERSION in `cat versions.txt`; do
        curl -L https://nginx.org/download/nginx-${VERSION}.tar.gz -o nginx-${TYPE}.tar.gz
        curl -L https://nginx.org/download/nginx-${VERSION}.tar.gz.asc -o pgp.asc
        gpg --verify pgp.asc nginx-${TYPE}.tar.gz
        rm pgp.asc
      done
  artifacts:
    paths:
      - nginx-*.tar.gz
      - versions.txt
    expire_in: 1 day

.build:
  rules:
    - if: "$BUILD"
      when: on_success
    - when: never
  stage: build
  needs:
    - job: gpg:verify
  before_script:
    - export PATH="/usr/lib/ccache/bin:$PATH"
    - mkdir ${CI_PROJECT_DIR}/ccache
    - export CCACHE_DIR="${CI_PROJECT_DIR}/ccache"
    - ccache -s
    - export CPPFLAGS="${CPPFLAGS} -fstack-protector-strong -fpic -fpie -O2"
    - export CFLAGS="${CFLAGS} -fstack-protector-strong -fpic -fpie -O2"
    - mkdir src
    - tar -xzf nginx-${TYPE}.tar.gz -C src --strip-components=1
    script:
    - addgroup -g 1000 www-data && adduser -u 1000 -G www-data -s /bin/sh -D www-data
    - apk add --no-cache pcre-dev libxml2-dev libxslt-dev gd-dev geoip-dev perl-dev
    - |
      ./configure \
          --user=www-data \
          --group=www-data \
          --conf-path=/etc/nginx.conf \
          --with-http_addition_module \
          --with-http_addition_module \
          --with-http_auth_request_module \
          --with-http_dav_module \
          --with-http_geoip_module \
          --with-http_gzip_static_module \
          --with-http_image_filter_module \
          --with-http_perl_module \
          --with-http_realip_module \
          --with-http_ssl_module \
          --with-http_stub_status_module \
          --with-http_sub_module \
          --with-http_xslt_module \
          --with-ipv6 \
          --with-mail \
          --with-mail_ssl_module \
          --with-pcre-jit \
          --error-log-path=/proc/self/fd/2 \
          --http-log-path=/proc/self/fd/1 \
          --prefix=/usr/local/nginx \
          --sbin-path=/usr/local/bin
    - make
    - find -type f -name '*.a' -delete
    - make install
    - cp entrypoint /usr/local/bin/
    - cp healthcheck /usr/local/bin/
    - $(cd /usr/local && tar -czf /tmp/nginx-${ARCH}.tar.gz *)
    - mkdir binaries
    - cp nginx.conf binaries/nginx.conf
    - cp default.template binaries/default.template
    - mv /tmp/nginx-${ARCH}.tar.gz binaries/
  after_script:
    - ccache -s
  cache:
    paths:
      - ccache
    key: nginx.build-ccache-${ARCH}-${TYPE}
  artifacts:
    paths: binaries/
    when: on_success
    expire_in: 1 day

build:arm64:
  extends: .build
  tags: [ native-arm64 ]
  variables:
    ARCH: arm64

build:amd64:
  extends: .build
  tags: [ native-amd64 ]
  variables:
    ARCH: amd64

build:others:
  extends: .build
  parallel:
    matrix:
      - { ARCH: "s390x", NILL: "null" }
      - { ARCH: "ppc64le", NILL: "null" }
      - { ARCH: "386", NILL: "null" }

containerize:
  rules:
    - if: "$BUILD"
      when: on_success
    - when: never
  variables:
    ARCHS: "linux/arm64,linux/amd64,linux/386,linux/ppc64le,linux/s390x"
  stage: containerize
  needs:
    - job: build:arm64
      artifacts: true
    - job: build:amd64
      artifacts: true
    - job: build:others
      artifacts: true
  script:
    - EXTRA_TAGS=""
    - if [  "${TYPE}" == "MAINLINE" ]; EXTRA_TAGS=",latest"; fi
    - TYPE_TAG=$(echo "${TYPE}" | awk '{print tolower($0)}')
    - TAGS=$(helper "ghcr.io/jitesoft/nginx,jitesoft/nginx,${CI_REGISTRY_IMAGE}" "${VERSION},${TYPE_TAG}${EXTRA_TAGS}")
    - docker buildx build --platform ${ARCHS} --push ${TAGS} --progress plain --build-arg VERSION=${VERSION} .
    - echo -e "${VERSION}" > ${TYPE}.txt
  tags: [ buildx, protected ]
  cache:
    policy: pull-push
    paths:
      - MAINLINE.txt
      - STABLE.txt
    key: nginx.versions

push:non-multi-arch:
  rules:
    - if: "$BUILD"
      when: on_success
    - when: never
  stage: post
  image: registry.gitlab.com/jitesoft/dockerfiles/misc:latest
  script:
    - TYPE_TAG=$(echo "${TYPE}" | awk '{print tolower($0)}')
    - docker pull ${CI_REGISTRY_IMAGE}:${TYPE_TAG}
    - helper multitag ${CI_REGISTRY_IMAGE}:${TYPE_TAG} quay.io/jitesoft/nginx:latest quay.io/jitesoft/nginx:${VERSION} quay.io/jitesoft/nginx:${TYPE_TAG}
    - helper multipush quay.io/jitesoft/nginx:latest quay.io/jitesoft/nginx:${VERSION} quay.io/jitesoft/nginx:${TYPE_TAG}
  tags: [ protected, buildx ]

