include:
  - https://gitlab.com/jitesoft/gitlab-ci-lib/raw/master/container_scan-v2.yml

stages:
  - prebuild
  - download
  - build
  - extra
  - scan

variables:
  PLATFORMS: "linux/arm64,linux/amd64,linux/386,linux/ppc64le,linux/s390x"

download:versions:
  image: registry.gitlab.com/jitesoft/dockerfiles/misc:latest
  variables:
    GIT_STRATEGY: none
  stage: prebuild
  script:
    - VERSIONS=$(wget -qO- https://nginx.org/en/download.html | grep -oP '(?<=\<a href=\"/download/nginx\-)([0-9]{0,2}(\.?)){2}([0-9]{0,2})' | awk '{print $1}' | uniq | head -n2)
    - echo -e ${VERSIONS} > versions.txt
  artifacts:
    paths:
      - versions.txt
    expire_in: 1 day

gpg:import:
  image: registry.gitlab.com/jitesoft/dockerfiles/misc:latest
  stage: prebuild
  script:
    - |
      if [ -f keys.out ]; then
        gpg --import keys.out
      fi
    - |
      for key in `cat pgpkeys.txt`; do
        gpg --list-keys ${key} || (
          gpg --keyserver pgp.mit.edu --recv-keys "${key}" ||
          gpg --keyserver keyserver.pgp.com --recv-keys "${key}" ||
          gpg --keyserver ha.pool.sks-keyservers.net --recv-keys "${key}"
        )
      done
    - gpg --export > keys.out
  cache:
    key: nginx.gpg.keyring
    paths:
      - keys.out
  artifacts:
    paths:
      - keys.out
    expire_in: 1 day

download:
  stage: download
  image: registry.gitlab.com/jitesoft/dockerfiles/misc:latest
  variables:
    GIT_STRATEGY: none
  dependencies:
    - download:versions
    - gpg:import
  script:
    - gpg --import keys.out
    - |
      for VERSION in `cat versions.txt`; do
        curl -L https://nginx.org/download/nginx-${VERSION}.tar.gz -o nginx-${VERSION}.tar.gz
        curl -L https://nginx.org/download/nginx-${VERSION}.tar.gz.asc -o pgp.asc
        gpg --verify pgp.asc nginx-${VERSION}.tar.gz
        rm pgp.asc
      done
  artifacts:
    paths:
      - nginx-*.tar.gz
      - versions.txt
    expire_in: 1 day

.build:
  stage: build
  image: registry.gitlab.com/jitesoft/dockerfiles/misc:latest
  dependencies:
    - download
  script:
    - mv nginx-${VERSION}.tar.gz nginx.tar.gz
    - TAG_LIST=$(helper taglist "jitesoft/nginx,${CI_REGISTRY_IMAGE}" "${VERSION}${TAGS}")
    - docker buildx build --platform ${PLATFORMS} --progress plain --push ${TAG_LIST} --build-arg VERSION=${VERSION} .
  tags: [ jitesoft, buildx, amd64, arm64, x86, ppc64le, s390x ]

build:mainline:
  before_script:
    - VERSION=$(awk '{print $1}' versions.txt)
  extends: .build
  variables:
    TAGS: ",latest,mainline"

build:stable:
  before_script:
    - VERSION=$(awk '{print $2}' versions.txt)
  extends: .build
  variables:
    TAGS: "stable"

push:non-multi-arch:
  stage: extra
  image: registry.gitlab.com/jitesoft/dockerfiles/misc:latest
  script:
    - STABLE_VERSION=$(awk '{print $2}' versions.txt)
    - MAINLINE_VERSION=$(awk '{print $1}' versions.txt)
    - docker pull ${CI_REGISTRY_IMAGE}:mainline
    - docker pull ${CI_REGISTRY_IMAGE}:stable
    - helper multitag ${CI_REGISTRY_IMAGE}:mainline quay.io/jitesoft/nginx:latest quay.io/jitesoft/nginx:${MAINLINE_VERSION} quay.io/jitesoft/nginx:mainline
    - helper multitag ${CI_REGISTRY_IMAGE}:stable quay.io/jitesoft/nginx:${STABLE_VERSION} quay.io/jitesoft/nginx:stable
    - helper multipush quay.io/jitesoft/nginx:${STABLE_VERSION} quay.io/jitesoft/nginx:stable quay.io/jitesoft/nginx:latest quay.io/jitesoft/nginx:${MAINLINE_VERSION} quay.io/jitesoft/nginx:mainline

scan:mainline:
  needs:
    - build:mainline
  extends: .container_scanning
  variables:
    SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}:mainline"
    GIT_STRATEGY: none

scan:stable:
  needs:
    - build:stable
  extends: .container_scanning
  variables:
    SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}:stable"
    GIT_STRATEGY: none
