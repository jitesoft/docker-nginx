include:
  - https://gitlab.com/jitesoft/gitlab-ci-lib/raw/master/container_scan-v2.yml

stages:
  - prebuild
  - download
  - build
  - scan

variables:
  VERSION: 1.17.1

download:versions:
  image: registry.gitlab.com/jitesoft/dockerfiles/alpine:latest
  variables:
    GIT_STRATEGY: none
  stage: prebuild
  before_script:
    - apk add --no-cache wget grep
  script:
    - VERSIONS=$(wget -qO- https://nginx.org/en/download.html | grep -oP '(?<=\<a href=\"/download/nginx\-)([0-9]{0,2}(\.?)){2}([0-9]{0,2})' | awk '{print $1}' | uniq | head -n2)
    - echo -e ${VERSIONS} > versions.txt
  artifacts:
    paths:
      - versions.txt
    expire_in: 1 day

gpg:import:
  image: registry.gitlab.com/jitesoft/dockerfiles/alpine:latest
  stage: prebuild
  before_script:
    - apk add --no-cache gnupg linux-headers
  script:
    - |
      if [[ "$(cat keysum.txt | md5sum -c)" ]]
      then
        echo "Keys already imported."
      else
        for key in `cat pgpkeys.txt`; do
          gpg --keyserver pgp.mit.edu --recv-keys "${key}" ||
          gpg --keyserver keyserver.pgp.com --recv-keys "${key}" ||
          gpg --keyserver ha.pool.sks-keyservers.net --recv-keys "${key}";
        done
        gpg --export > keys.out
        md5sum pgpkeys.txt | tee keysum.txt
      fi
  cache:
    key: php.gpg.keyring
    paths:
      - keys.out
      - keysum.txt
  artifacts:
    paths:
      - keys.out
    expire_in: 1 day

download:
  stage: download
  image: registry.gitlab.com/jitesoft/dockerfiles/alpine:latest
  variables:
    GIT_STRATEGY: none
  dependencies:
    - download:versions
    - gpg:import
  before_script:
    - apk add --no-cache curl gnupg
  script:
    - gpg --import keys.out
    - |
      for VERSION in `cat versions.txt`; do
        curl -L https://nginx.org/download/nginx-${VERSION}.tar.gz -o nginx-${VERSION}.tar.gz
        curl -L https://nginx.org/download/nginx-${VERSION}.tar.gz.asc -o pgp.asc
        gpg --verify pgp.asc nginx-${VERSION}.tar.gz
        rm pgp.asc
      done
  artifacts:
    paths:
      - nginx-*.tar.gz
      - versions.txt
    expire_in: 1 day

.build:
  stage: build
  image: registry.gitlab.com/jitesoft/dockerfiles/docker:latest
  dependencies:
    - download
  script:
    - mv nginx-${VERSION}.tar.gz nginx.tar.gz
    - docker build -t ${CI_REGISTRY_IMAGE}:${VERSION} --label "com.jitesoft.app.nginx.version=${VERSION}" .
    - TAGS="${TAGS} ${VERSION}"
    - |
      for tag in ${TAGS}; do
        docker tag ${CI_REGISTRY_IMAGE}:${VERSION} ${CI_REGISTRY_IMAGE}:${tag}
        docker tag ${CI_REGISTRY_IMAGE}:${VERSION} jitesoft/nginx:${tag}
        docker tag ${CI_REGISTRY_IMAGE}:${VERSION} quay.io/jitesoft/nginx:${tag}
        docker push ${CI_REGISTRY_IMAGE}:${tag}
        docker push jitesoft/nginx:${tag}
        docker push quay.io/jitesoft/nginx:${tag}
      done

build:mainline:
  before_script:
    - VERSION=$(awk '{print $1}' versions.txt)
  extends: .build
  variables:
    TAGS: "latest mainline"

build:stable:
  before_script:
    - VERSION=$(awk '{print $2}' versions.txt)
  extends: .build
  variables:
    TAGS: "stable"


scan:mainline:
  needs:
    - build:mainline
  extends: .container_scanning
  variables:
    SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}:mainline"
    GIT_STRATEGY: none

scan:stable:
  needs:
    - build:stable
  extends: .container_scanning
  variables:
    SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}:stable"
    GIT_STRATEGY: none
